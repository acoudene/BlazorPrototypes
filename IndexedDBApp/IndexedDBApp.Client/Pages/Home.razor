@page "/"
@using Blazor.IndexedDB
@using IndexedDBApp.Client.Models
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Home</PageTitle>

<h1>Hello IndexedDB!</h1>
<p>
  <button @onclick=@(async () => await AddNewPersonAsync())>Add New Person in IndexedDB</button>
  <button @onclick=@(async () => await PurgeDatabaseAsync())>Purge Database</button>
</p>

<p>
  <InputFile accept="image/*" OnChange="LoadFilesAsync" multiple />
</p>

<QuickGrid Items="_persons.AsQueryable()">
  <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
  <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" />
  <PropertyColumn Property="@(p => p.LastName)" Sortable="true" />
</QuickGrid>

<ul>
  @foreach (var file in _fileStorages.SelectMany(f => f.Files).Select(f => Convert.ToBase64String(f)))
  {
    <img src="data:image/png;base64,@file" width="100px" height="100px" />
  }
</ul>



@code
{
  [Inject]
  public required IIndexedDbFactory DbFactory { private get; init; }

  private List<FileStorage> _fileStorages = Enumerable.Empty<FileStorage>().ToList();

  private List<Person> _persons = Enumerable.Empty<Person>().ToList();

  private async Task PurgeDatabaseAsync()
  {
    using (var db = await DbFactory.Create<MyDatabaseDb>())
    {
      db.People?.Clear();
      db.Files?.Clear();
      await db.SaveChanges();
    }

    await RefreshDataAsync();
  }

  private async Task LoadFilesAsync(InputFileChangeEventArgs e)
  {
    var files = e.GetMultipleFiles(maximumFileCount: 1000);
    foreach (var browserFile in files)
    {
      await using MemoryStream fs = new MemoryStream();
      await browserFile.OpenReadStream(maxAllowedSize: 51200000).CopyToAsync(fs);
      var file = fs.ToArray();

      var fileStorage = new FileStorage();
      fileStorage.Files.Add(file);
      await StoreAsync(fileStorage);      
    }

    await RefreshDataAsync();
  }

  protected async Task StoreAsync(FileStorage fileStorage)
  {
    using (var db = await DbFactory.Create<MyDatabaseDb>())
    {
      db.Files?.Add(fileStorage);

      await db.SaveChanges();
    }
  }


  protected async Task RefreshDataAsync()
  {
    using (var db = await DbFactory.Create<MyDatabaseDb>())
    {
      _persons = db.People?.ToList() ?? Enumerable.Empty<Person>().ToList();
      _fileStorages = db.Files?.ToList() ?? Enumerable.Empty<FileStorage>().ToList();
    }

    StateHasChanged();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await RefreshDataAsync();
    }
  }


  protected async Task AddNewPersonAsync()
  {
    using (var db = await DbFactory.Create<MyDatabaseDb>())
    {
      db.People?.Add(new Person()
        {
          FirstName = Guid.NewGuid().ToString(),
          LastName = Guid.NewGuid().ToString()
        });

      await db.SaveChanges();
    }

    await RefreshDataAsync();
  }

  /// <seealso cref="https://mdn.github.io/dom-examples/to-do-notifications/"/>
  /// <seealso cref="https://mdn.github.io/dom-examples/indexeddb-api/index.html"/>
  /// Be careful to disable this kind of option in browser to get persisted data after closing: 
  /// Example in edge (in french), go to "Paramètres > Confidentialité [...] > Effacer les données de navigation lors de la fermeture > Cookies et autres [...]"
  /// Set disable for all or select the right 
}