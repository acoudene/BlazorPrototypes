@inject HttpClient Http
@inject NavigationManager Navigation

@if (_isUpdateAvailable)
{
  <div class="update-banner">
    🆕 Une nouvelle version est disponible.
    <button @onclick="ReloadApp">Recharger</button>
  </div>
}

@code {
  private string? _currentVersion;
  private string? _latestVersion;
  private bool _isUpdateAvailable = false;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var localResponse = await Http.GetAsync("version.json", HttpCompletionOption.ResponseHeadersRead);
      _currentVersion = await localResponse.Content.ReadAsStringAsync();

      var remoteResponse = await Http.GetAsync("version.json?nocache=" + Guid.NewGuid());
      _latestVersion = await remoteResponse.Content.ReadAsStringAsync();

      if (!string.IsNullOrWhiteSpace(_currentVersion) &&
          !string.IsNullOrWhiteSpace(_latestVersion) &&
          _currentVersion.Trim() != _latestVersion.Trim())
      {
        _isUpdateAvailable = true;
      }
    }
    catch
    {
      // Ignore les erreurs réseau
    }
  }

  private void ReloadApp()
  {
    Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
  }
}