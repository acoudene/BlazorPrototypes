@page "/cameracapture"
@using CameraCaptureApp.Client.ViewModels
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Drawing
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.Formats.Jpeg
@using SixLabors.ImageSharp.Processing
@using Color = SixLabors.ImageSharp.Color;

@* Reference: https://wellsb.com/csharp/aspnet/blazor-webcam-capture *@

<PageTitle>Camera Capture</PageTitle>


<MudStack>
  <MudPaper>
    <video id="videoFeed" width="320" height="240" />
  </MudPaper>
  <MudPaper>
    <canvas class="d-none" id="currentFrame" width="320" height="240" />
  </MudPaper>
  <MudPaper>
    <MudButton Variant="Variant.Filled" @onclick="CaptureFrameAsync">Capture Frame</MudButton>
  </MudPaper>

  @if (!string.IsNullOrWhiteSpace(_frameDataUri))
  {
    <MudPaper>
      <img src="@_frameDataUri" width="320" height="240" />
    </MudPaper>
    <MudPaper>
      <MudButton Variant="Variant.Filled" @onclick="SaveAsync">Save</MudButton>
    </MudPaper>
  }
</MudStack>

@code {

  [Inject]
  public required IJSRuntime JsRuntime { get; init; }

  [Inject]
  public required CameraCaptureViewModel ViewModel { get; init; }

  [Inject]
  public required ISnackbar Snackbar { get; init; }

  private string? _frameDataUri;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JsRuntime.InvokeVoidAsync("startVideo", "videoFeed");
    }
    await base.OnAfterRenderAsync(firstRender);
  }

  private async Task CaptureFrameAsync()
  {
    await JsRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
  }

  [JSInvokable]
  public void ProcessImage(string imageString)
  {
    byte[] imageData = Convert.FromBase64String(imageString.Split(',')[1]);

    //Do image processing here
    using var image = Image.Load(imageData);
    image.Mutate(x => x
        .Flip(FlipMode.Horizontal) //To match mirrored webcam image
        .Fill(Color.ParseHex("0008"), new RectangularPolygon(0, 220, 320, 20)) //Set footer bar for caption
        );
    _frameDataUri = image.ToBase64String(JpegFormat.Instance);
  }

  public async Task SaveAsync()
  {
    if (string.IsNullOrWhiteSpace(_frameDataUri))
      return;

    try
    {
      var apiUri = await ViewModel.StorePhotoAsync(_frameDataUri);
      Snackbar.Add($"Photo saved: {apiUri}", Severity.Success);
    }
    catch (Exception ex)
    {
      Snackbar.Add($"Error saving photo: {ex.Message}", Severity.Error);
    }
  }
}
