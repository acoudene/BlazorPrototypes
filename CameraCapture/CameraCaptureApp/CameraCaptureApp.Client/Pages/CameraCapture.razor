@page "/cameracapture"
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Drawing
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.Formats.Jpeg
@using SixLabors.ImageSharp.Processing
@using Color = SixLabors.ImageSharp.Color;

@* Reference: https://wellsb.com/csharp/aspnet/blazor-webcam-capture *@

<PageTitle>Camera Capture</PageTitle>

<video id="videoFeed" width="320" height="240" />
<canvas class="d-none" id="currentFrame" width="320" height="240" />
<br />
<button class="btn btn-primary mb-3" @onclick="CaptureFrameAsync">Capture Frame</button>
<br />

@if (!string.IsNullOrWhiteSpace(_frameUri))
{
  <img src="@_frameUri" />
}

@code {

  [Inject]
  public required IJSRuntime JsRuntime { get; init; }

  private string? _frameUri;


  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JsRuntime.InvokeVoidAsync("startVideo", "videoFeed");
    }
    await base.OnAfterRenderAsync(firstRender);
  }

  private async Task CaptureFrameAsync()
  {
    await JsRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
  }

  [JSInvokable]
  public void ProcessImage(string imageString)
  {
    byte[] imageData = Convert.FromBase64String(imageString.Split(',')[1]);

    //Do image processing here
    using var image = Image.Load(imageData);
    image.Mutate(x => x
        .Flip(FlipMode.Horizontal) //To match mirrored webcam image
        .Fill(Color.ParseHex("0008"), new RectangularPolygon(0, 220, 320, 20)) //Set footer bar for caption
        );
    _frameUri = image.ToBase64String(JpegFormat.Instance);

  }
}
